Abigail PlataCSE 31
Lab T 10:30amFebruary 8, 2017
Homework #1
1. a) -246
   b) -33
   c) 32735
   d) 21845

2. a) Unsigned
	i) 65290
	ii) 65503
	iii) 32735
	iv) 21845
   b) Sign Magnitude //like unsigned but with the sign
	i)-32522
	ii)-32735
	iii)32735
	iv)21845
   c) 1’s compliment
	i) 245
	ii) 32
	iii) 65568
	iv) 42949   d) Biased
	i) 32523
	ii) 32736
	iii) -32
	iv) -10922

3. (two binary strings and two corresponding decimal numbers) // negative & positive biggest & smallest numbers
   a. A nibble (4 bits) using 2’s compliment
	i) 0111
	ii)1000
	iii)7
	iv)-8
   b. A byte using sign-magnitude 
	i)01111
	ii)10000
	iii)15
	iv)-16
   c. A byte using one’s compliment
	i)0111 1111
	ii)1000 0000
	iii)127
	iv)-127

4. int bitCount (unsigned int n) {
	int numOf1s = 0;
	// use conversion into binary process
	// instead of saving binary values,
	// just check the binary value is 1 or not
	while (n != 0) {
		if(n%2 == 1) {
			numOf1s++;
		}
		n = n/2;
	}
	return numOf1s;
   }

5.
	#include <stdio.h>
	#include <stdlib.h>

int bitCount ( unsigned int n) {

 		int numOf1s=0;

		while(n!=0) {
     			if(n%2==1)   {
           			 numOf1s++;
			}
		n=n/2;
		}
		return numOf1s;
	}


	int main (int argc, char * argv[]) {

		if(argc < 2) {
			// Give some usage thing
			puts("Usage: bitcount");
			return 0;
		}

		if(argc > 2) {
    			puts("Too many arguments!");
				return 0;
		} else {
		int x = bitCount(atoi(argv[1]));
			printf("%d\n", x);
		}
		/* printf ("# 1-bits in base 2 repesentation of %u = %d, should be 0\n",0, bitCount (0));
		printf ("# 1-bits in base 2 representation of %u = %d, should be 1\n",1, bitCount (1));
		printf ("# 1-bits in base 2 representation of %u = %d, should be 16\n",2863311530u, bitCount (2863311530u));
		printf ("# 1-bits in base 2 representation of %u = %d, should be 1\n",536870912, bitCount (536870912));
		printf ("# 1-bits in base 2 representation of %u = %d, should be 32\n",4294967295u, bitCount (4294967295u));

		return 0;
		*/

	}